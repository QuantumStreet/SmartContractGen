{
  "name": "nft_marketplace",
  "program_id": "Fg6PAfL2qV7B5VwQm3YH1aX2aX2aX2aX2aX2aX2aX2aX2a",
  "author": "Solana Security Council",
  "version": "2.1.0",
  "description": "NFT marketplace with royalty enforcement",
  "generation_date": "2023-10-15",
  "audit_report": "https://audit.example.com/nft_marketplace",
  "imports": [
    "use anchor_lang::prelude::*;",
    "use anchor_spl::token::{self, Mint, Token, TokenAccount};",
    "use anchor_spl::associated_token::AssociatedToken;",
    "use mpl_token_metadata::state::Metadata;"
  ],
  "constants": [
    {
      "name": "MAX_ROYALTY_PERCENT",
      "type": "u8",
      "value": "10",
      "description": "Maximum allowed royalty (10%)"
    }
  ],
  "errors": {
    "name": "MarketplaceError",
    "codes": [
      {
        "name": "InvalidRoyalty",
        "description": "Royalty exceeds maximum allowed"
      },
      {
        "name": "UnauthorizedTransfer",
        "description": "Only owner can list NFT"
      }
    ]
  },
  "events": [
    {
      "name": "NFTListed",
      "description": "Emitted when NFT is listed for sale",
      "fields": [
        { "name": "seller", "type": "Pubkey", "description": "Seller address" },
        { "name": "nft_mint", "type": "Pubkey", "description": "NFT mint" },
        { "name": "price", "type": "u64", "description": "Listing price (lamports)" }
      ]
    }
  ],
  "accounts": [
    {
      "name": "ListNFTAccounts",
      "description": "Accounts for listing NFT",
      "instruction_params": [
        { "name": "price", "type": "u64" }
      ],
      "fields": [
        {
          "name": "seller",
          "type": "Signer",
          "is_signer": true,
          "description": "NFT owner",
          "security_notes": "Must be NFT owner"
        },
        {
          "name": "nft_account",
          "type": "Account",
          "is_mut": true,
          "constraints": [
            "token::mint = nft_mint",
            "token::owner = seller",
            "token::amount = 1"
          ],
          "description": "Seller's NFT token account",
          "security_notes": "Must verify NFT ownership"
        },
        {
          "name": "nft_metadata",
          "type": "AccountInfo",
          "constraints": [
            "seeds = [b\"metadata\", mpl_token_metadata::ID.as_ref(), nft_mint.as_ref()]",
            "bump"
          ],
          "description": "NFT metadata account",
          "security_notes": "Must be valid metadata PDA"
        },
        {
          "name": "marketplace",
          "type": "Account",
          "is_mut": true,
          "constraints": [
            "has_one = marketplace_authority"
          ],
          "description": "Marketplace state",
          "security_notes": "Must be initialized marketplace"
        }
      ],
      "pdas": [
        { "name": "marketplace_authority" }
      ]
    }
  ],
  "states": [
    {
      "name": "Marketplace",
      "description": "Marketplace configuration",
      "fields": [
        {
          "name": "authority",
          "type": "Pubkey",
          "description": "Marketplace admin",
          "security_notes": "Immutable after initialization"
        },
        {
          "name": "fee_percent",
          "type": "u8",
          "description": "Platform fee (0-100 basis points)",
          "security_notes": "Immutable after initialization"
        }
      ]
    }
  ],
  "instructions": [
    {
      "name": "list_nft",
      "description": "List NFT for sale",
      "context_name": "ListNFTAccounts",
      "params": [
        { "name": "price", "type": "u64", "description": "Listing price in lamports" }
      ],
      "security_notes": "Verifies NFT ownership and royalty limits",
      "security_checks": [
        "let metadata = Metadata::from_account_info(&ctx.accounts.nft_metadata)?;",
        "require!(metadata.royalty_basis_points <= MAX_ROYALTY_PERCENT * 100, MarketplaceError::InvalidRoyalty);"
      ],
      "body": [
        "ctx.accounts.marketplace.total_listings = ctx.accounts.marketplace.total_listings.checked_add(1).unwrap();",
        "// Transfer NFT to escrow handled by separate CPI"
      ],
      "events": [
        {
          "name": "NFTListed",
          "params": ["seller", "nft_mint", "price"]
        }
      ]
    }
  ],
  "cpi_handlers": [
    {
      "name": "EscrowCPI",
      "description": "Handles NFT transfer to escrow",
      "context": "EscrowContext",
      "method": "transfer_to_escrow",
      "params": [
        { "name": "nft_mint", "type": "Pubkey" }
      ],
      "body": [
        "let cpi_program = ctx.accounts.token_program.to_account_info();",
        "let cpi_accounts = Transfer {",
        "    from: ctx.accounts.seller_nft_account.to_account_info(),",
        "    to: ctx.accounts.escrow_nft_account.to_account_info(),",
        "    authority: ctx.accounts.seller.to_account_info(),",
        "};",
        "let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);",
        "token::transfer(cpi_ctx, 1)?;"
      ]
    }
  ],
  "tests": [
    {
      "name": "list_valid_nft",
      "description": "Successfully lists a valid NFT",
      "setup": [
        "let program = ProgramTest::new(\"nft_marketplace\", nft_marketplace::ID, None);",
        "let (mut ctx, seller) = setup::initialize(&mut program).await;"
      ],
      "instruction": "list_nft",
      "params": [
        "seller",
        "nft_mint",
        "1000000000"
      ],
      "assertions": [
        "assert_eq!(ctx.accounts.marketplace.total_listings, 1);",
        "assert!(ctx.logs.contains(\"NFTListed\"));"
      ]
    }
  ]
}